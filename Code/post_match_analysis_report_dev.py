# -*- coding: utf-8 -*-
"""TAL Prakrida vs SBFC M1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XMRma8A_bIpfvOc9AeNMsJPgA1gP202X
"""

import pandas as pd
import numpy as np
from mplsoccer import Pitch
import matplotlib.pyplot as plt


"""## **Testing Streamlit**"""


# Commented out IPython magic to ensure Python compatibility.
#writefile app.py
import streamlit as st

#Load event data
st.title("Post-Match Analysis Report")

#file_path = "D:/fooball/projecs/Prakrida/Match files/TAL/M1.csv"
# Read the CSV file into a DataFrame
#df = pd.read_csv(file_path)

uploaded_file = st.file_uploader("/content/", type=["csv"])
if uploaded_file:
      #Load data into a DataFrame
     df = pd.read_csv(uploaded_file)
     # Display the raw data
     #st.subheader("Match Event Data")
     #st.dataframe(df)

     # Ensure columns exist
     required_columns = [ "Team", "Player","Event","Mins", "Secs", "X", "Y" ]
     if not all(col in df.columns for col in required_columns):
         st.error(f"Data must include columns: {', '.join(required_columns)}")
     else:
        #Sort data by time
         df = df.sort_values(by=["Mins", "Secs"]).reset_index(drop=True)

         # Correct Y-axis
         df["Y"] = 100 - df["Y"]

         #Lagging team names (to understand which team event it was before the current event)
         df["Nxt_Event"] = df["Event"].shift(-1)
         df["Nxt_Team"] = df["Team"].shift(-1)
         df["Key_Pass_Event"] = np.where((df["Nxt_Event"] == 'Shot On Target') | (df["Nxt_Event"] == 'Shot Off Target'), df["Nxt_Event"],'null')
         df["Key_Pass_Event"] = np.where(((df["Nxt_Event"] == 'Unsuccessful DA') | (df["Nxt_Event"] == 'Tackle')) & (df["Nxt_Team"] != df["Team"]),
                                df["Event"].shift(-2), df["Key_Pass_Event"])
         df["Key_Pass"] = np.where(((df["Key_Pass_Event"] == 'Shot On Target') | (df["Key_Pass_Event"] == 'Shot Off Target')) & (df["Event"] == 'Successful Pass'),1,0)

         st.dataframe(df)
         # Sidebar filters
         st.sidebar.header("Filters")
         team_filter = st.sidebar.selectbox("Select Team", options=["All"] + df["Team"].unique().tolist())
         player_filter = st.sidebar.selectbox("Select Player", options=["All"] + df["Player"].unique().tolist())
         filtered_df = df.copy()

         if team_filter != "All":

             filtered_df = filtered_df[filtered_df["Team"] == team_filter]

         if player_filter != "All":

             filtered_df = filtered_df[filtered_df["Player"] == player_filter]

         teams = df["Team"].unique().tolist()
         team_a = teams[1]
         team_b = teams[0]
         first_half = filtered_df[(filtered_df["Mins"] < 10) | (filtered_df["Mins"] == 10) & (filtered_df["Secs"] <= 39)]
         second_half = filtered_df[(filtered_df["Mins"] > 10) | (filtered_df["Mins"] == 10) & (filtered_df["Secs"] > 39)]

         # Ball Possession Calculation
         #First Half
         bp_fh = first_half[((first_half['Event'] == 'Successful Pass') |(first_half['Event'] == 'Unsuccessful Pass')| (first_half['Event'] =='Shot On Target') | (first_half['Event'] =='Shot Off Target') | (first_half['Event'] =='Goal Throw'))]
         bp_pr_fh = bp_fh[bp_fh['Team'] == 'Prakrida FC']
         bp_sbfc_fh = bp_fh[bp_fh['Team'] == 'SBFC']

         total_event_counts_fh = bp_fh["Event"].value_counts()
         total_pr_events_fh = bp_pr_fh["Event"].value_counts()
         total_sbfc_events_fh = bp_sbfc_fh["Event"].value_counts()

         bposs_pr_fh = round(((total_pr_events_fh.sum()/total_event_counts_fh.sum()) *100),2)
         bposs_sbfc_fh = round(((total_sbfc_events_fh.sum()/total_event_counts_fh.sum()) *100),2)


         #Second Half
         bp_sh = second_half[((second_half['Event'] == 'Successful Pass') |(second_half['Event'] == 'Unsuccessful Pass')| (second_half['Event'] =='Shot On Target') | (second_half['Event'] =='Shot Off Target') | (second_half['Event'] =='Goal Throw'))]
         bp_pr_sh = bp_sh[bp_sh['Team'] == 'Prakrida FC']
         bp_sbfc_sh = bp_sh[bp_sh['Team'] == 'SBFC']

         total_event_counts_sh = bp_sh["Event"].value_counts()
         total_pr_events_sh = bp_pr_sh["Event"].value_counts()
         total_sbfc_events_sh = bp_sbfc_sh["Event"].value_counts()

         bposs_pr_sh = round(((total_pr_events_sh.sum()/total_event_counts_sh.sum()) *100),2)
         bposs_sbfc_sh = round(((total_sbfc_events_sh.sum()/total_event_counts_sh.sum()) *100),2)

         #Full Time
         total_event_counts = total_event_counts_sh.sum() + total_event_counts_fh.sum()
         total_pr_events = total_pr_events_sh.sum() + total_pr_events_fh.sum()
         total_sbfc_events = total_sbfc_events_sh.sum() + total_sbfc_events_fh.sum()

         bposs_pr = round(((total_pr_events/total_event_counts)*100),2)
         bposs_sbfc = round(((total_sbfc_events/total_event_counts)*100),2)

         st.markdown("---")
         st.subheader("Ball Possession")
         st.markdown("---")
         st.markdown(

                       "<h2 style='text-align: center; color: gray;'>First Half</h2>", unsafe_allow_html=True

         )
         bp_fh =  f"""

                        <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                        <p><strong>{team_a}</strong>: {bposs_pr_fh}%</p>

                        <p><strong>{team_b}</strong>: {bposs_sbfc_fh}%</p>

                        </div>

                        """
         st.markdown(bp_fh, unsafe_allow_html=True)
         st.markdown("<h2 style='text-align: center; color: gray;'>Second Half</h2>", unsafe_allow_html=True)
         bp_sh = f"""
                        <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                        <p><strong>{team_a}</strong>: {bposs_pr_sh}%</p>

                        <p><strong>{team_b}</strong>: {bposs_sbfc_sh}%</p>

                        </div>

                        """

         st.markdown(bp_sh,unsafe_allow_html=True)
         st.markdown(

                       "<h2 style='text-align: center; color: gray;'>Full Time</h2>", unsafe_allow_html=True

         )
         bp_full = f"""

                        <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                        <p><strong>{team_a}</strong>: {bposs_pr}%</p>

                        <p><strong>{team_b}</strong>: {bposs_sbfc}%</p>

                        </div>

                        """
         st.markdown(bp_full,unsafe_allow_html=True)
         st.markdown("------------------------------------------------")

         col1, col2, col3 = st.columns(3)

         col1.metric("Goals", 3, "+1")
         col2.metric("Pass Accuracy", "85%", "-2%")
         col3.metric("Possession", "61%", "+5%")

      #Shot Data

         st.subheader("Shot Data")
         st.markdown("------------------------------------------------")
         total_shots=f"""

                        <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                        <p><strong>Total Shots</strong>: {len(filtered_df[(filtered_df["Event"] == "Shot On Target") | (filtered_df["Event"] == "Shot Off Target")])}</p>

                        </div>

                        """
         st.markdown(total_shots,unsafe_allow_html=True)
         shot_details = f"""

                        <div style="display: flex; justify-content: space-between; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                        <p><strong>{team_a}</strong>: {len(filtered_df[((filtered_df["Event"] == "Shot On Target") | (filtered_df["Event"] == "Shot Off Target")) & (filtered_df["Team"] == "Prakrida FC")])}</p>

                        <p><strong>{team_b}</strong>: {len(filtered_df[((filtered_df["Event"] == "Shot On Target") | (filtered_df["Event"] == "Shot Off Target")) & (filtered_df["Team"] == "SBFC")])}</p>

                        </div>
                        """
         st.markdown(shot_details,unsafe_allow_html=True)
         shots_on_target = f"""

                                <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                                <p><strong>Shots On Target</strong>: {len(filtered_df[(filtered_df["Event"] == "Shot On Target")])}</p>

                                </div>

                                """
         st.markdown(shots_on_target, unsafe_allow_html=True)
         shots_on_target_det = f"""
                                    <div style="display: flex; justify-content: space-between; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                                    <p><strong>{team_a}</strong>: {len(filtered_df[((filtered_df["Event"] == "Shot On Target") & (filtered_df["Team"] == "Prakrida FC"))])}</p>

                                    <p><strong>{team_b}</strong>: {len(filtered_df[((filtered_df["Event"] == "Shot On Target") & (filtered_df["Team"] == "SBFC"))])}</p>

                                    </div>
                                """
         st.markdown(shots_on_target_det, unsafe_allow_html=True)
         st.markdown("---")
         st.subheader("Shots Conversion Rate")
         st.markdown("------------------------------------------------")
         shots_conv = f"""
                     <div style="display: flex; justify-content: space-between; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">
                     <p><strong>{team_a}</strong>:{round((len(filtered_df[((filtered_df["Event"] == "Goal")) & (filtered_df["Team"] == "Prakrida FC")])/len(filtered_df[((filtered_df["Event"] == "Shot On Target")) & (filtered_df["Team"] == "Prakrida FC")])),2)*100}%</p>
                     <p><strong>{team_b}</strong>:{round((len(filtered_df[((filtered_df["Event"] == "Goal")) & (filtered_df["Team"] == "SBFC")])/len(filtered_df[((filtered_df["Event"] == "Shot On Target")) & (filtered_df["Team"] == "SBFC")])),1)*100}%</p>
                     """
         st.markdown(shots_conv,unsafe_allow_html=True)
         st.markdown("------------------------------------------------")
        #Shot Map

        #First Half

         st.subheader("Shot Map")
         st.markdown("------------------------------------------------")
         st.subheader("First Half")
         shot_data_fh = first_half[(first_half["Event"] == "Shot On Target") | (first_half["Event"] == "Shot Off Target")]
         shot_data_pr_fh = shot_data_fh [shot_data_fh['Team'] == 'Prakrida FC'].reset_index(drop=True)
         shot_data_sbfc_fh = shot_data_fh [shot_data_fh['Team'] == 'SBFC'].reset_index(drop=True)

         outcome_colors = {"Shot On Target": "green",
                           "Shot Off Target": "red"
                           }
         outcome_markers = {"Shot Off Target": "o", #Circle
                            "Shot On Target": "*",#Star
                            }

         # Plot shots

         st.subheader("Prakrida FC")
         pitch = Pitch(pitch_type='opta', pitch_color='white', line_color='black')
         fig, ax = pitch.draw()
         if not shot_data_pr_fh.empty:

             for outcome in shot_data_pr_fh['Event']:
             #Filter the data for the current outcome
                 outcome_data = shot_data_pr_fh[shot_data_pr_fh["Event"] == outcome]
                 ax.scatter(outcome_data["X"], outcome_data["Y"], color=outcome_colors[outcome],marker=outcome_markers[outcome], s=100, label=outcome, alpha=0.7)
             handles, labels = ax.get_legend_handles_labels()
             by_label = dict(zip(labels, handles))
             ax.legend(by_label.values(), by_label.keys())
             st.pyplot(fig)

         else:

             st.info("No shot data available for First Half.")

         st.subheader("SBFC")
         pitch = Pitch(pitch_type='opta', pitch_color='white', line_color='black')
         fig, ax = pitch.draw()

         if not shot_data_sbfc_fh.empty:

             for outcome in shot_data_sbfc_fh['Event']:

             #Filter the data for the current outcome
                 outcome_data = shot_data_sbfc_fh[shot_data_sbfc_fh["Event"] == outcome]
                 ax.scatter(outcome_data["X"], outcome_data["Y"],color=outcome_colors[outcome],marker=outcome_markers[outcome], s=100, label=outcome, alpha=0.7)

             handles, labels = ax.get_legend_handles_labels()
             by_label = dict(zip(labels, handles))
             ax.legend(by_label.values(), by_label.keys())
             st.pyplot(fig)

         else:

             st.info("No shot data available for First Half.")

         # Second Half

         st.subheader("Second Half")
         shot_data_sh = second_half[(second_half["Event"] == "Shot On Target") | (second_half["Event"] == "Shot Off Target")]
         shot_data_pr_sh = shot_data_sh [shot_data_sh['Team'] == 'Prakrida FC'].reset_index(drop=True)
         shot_data_sbfc_sh = shot_data_sh [shot_data_sh['Team'] == 'SBFC'].reset_index(drop=True)

         # Plot shots

         st.subheader("Prakrida FC")

         pitch = Pitch(pitch_type='opta', pitch_color='white', line_color='black')

         fig, ax = pitch.draw()

         if not shot_data_pr_sh.empty:



             for outcome in shot_data_pr_sh['Event']:

                 # Filter the data for the current outcome

                 outcome_data = shot_data_pr_sh[shot_data_pr_sh["Event"] == outcome]

                 ax.scatter(outcome_data["X"], outcome_data["Y"],color=outcome_colors[outcome],marker=outcome_markers[outcome], s=100, label=outcome, alpha=0.7)



             handles, labels = ax.get_legend_handles_labels()

             by_label = dict(zip(labels, handles))

             ax.legend(by_label.values(), by_label.keys())

             st.pyplot(fig)

         else:

             st.info("No shot data available for First Half.")



         st.subheader("SBFC")

         pitch = Pitch(pitch_type='opta', pitch_color='white', line_color='black')

         fig, ax = pitch.draw()

         if not shot_data_sbfc_sh.empty:



             for outcome in shot_data_sbfc_sh['Event']:

                 # Filter the data for the current outcome

                 outcome_data = shot_data_sbfc_sh[shot_data_sbfc_sh["Event"] == outcome]

                 ax.scatter(outcome_data["X"], outcome_data["Y"],color=outcome_colors[outcome],marker=outcome_markers[outcome], s=100, label=outcome, alpha=0.7)



             handles, labels = ax.get_legend_handles_labels()

             by_label = dict(zip(labels, handles))

             ax.legend(by_label.values(), by_label.keys())

             st.pyplot(fig)

         else:

             st.info("No shot data available for First Half.")

         st.markdown("-------------------------------------")

         #Pass Data
         st.subheader("Pass Data")
         st.markdown("------------------------------------------------")
         st.subheader("Total Passes")

         #First Half
         pass_data_fh = first_half[(first_half["Event"] == "Successful Pass") | (first_half["Event"] == "Unsuccessful Pass")]
         pass_data_pr_fh = len(pass_data_fh[pass_data_fh['Team'] == 'Prakrida FC'].reset_index(drop=True))
         pass_data_sbfc_fh = len(pass_data_fh[pass_data_fh['Team'] == 'SBFC'].reset_index(drop=True))
         st.markdown("----------------------------------")

         st.markdown("<h2 style='text-align: center; color: gray;'>First Half</h2>", unsafe_allow_html=True)
         pass_fh = f"""
                        <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                        <p><strong>{team_a}</strong>: {pass_data_pr_fh}</p>

                        <p><strong>{team_b}</strong>: {pass_data_sbfc_fh}</p>

                        </div>

                 """
         st.markdown(pass_fh, unsafe_allow_html=True)

        # Second Half
         pass_data_sh = second_half[(second_half["Event"] == "Successful Pass") | (second_half["Event"] == "Unsuccessful Pass")]
         pass_data_pr_sh = len(pass_data_sh[pass_data_sh['Team'] == 'Prakrida FC'].reset_index(drop=True))
         pass_data_sbfc_sh = len(pass_data_sh[pass_data_sh['Team'] == 'SBFC'].reset_index(drop=True))

         st.markdown("<h2 style='text-align: center; color: gray;'>Second Half</h2>", unsafe_allow_html=True)
         pass_sh = f"""
                                 <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                                 <p><strong>{team_a}</strong>: {pass_data_pr_sh}</p>

                                 <p><strong>{team_b}</strong>: {pass_data_sbfc_sh}</p>

                                 </div>

                          """
         st.markdown(pass_sh, unsafe_allow_html=True)

         #Full Time
         pass_data_pr = pass_data_pr_fh + pass_data_pr_sh
         pass_data_sbfc = pass_data_sbfc_fh + pass_data_sbfc_sh

         st.markdown("<h2 style='text-align: center; color: gray;'>Full Time</h2>", unsafe_allow_html=True)
         pass_full = f"""

                                <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                                <p><strong>{team_a}</strong>: {pass_data_pr}</p>

                                <p><strong>{team_b}</strong>: {pass_data_sbfc}</p>

                                </div>

                                """
         st.markdown(pass_full, unsafe_allow_html=True)

         #Pass Accuracy
         st.subheader("Pass Accuracy")
         #First Half
         succ_pass_fh = first_half[(first_half["Event"] == "Successful Pass")]
         succ_pass_pr_fh = len(succ_pass_fh[succ_pass_fh['Team'] == 'Prakrida FC'].reset_index(drop=True))
         succ_pass_sbfc_fh = len(succ_pass_fh[succ_pass_fh['Team'] == 'SBFC'].reset_index(drop=True))

         pass_acc_pr_fh = round((succ_pass_pr_fh/pass_data_pr_fh),2)*100
         pass_acc_team2_fh = round((succ_pass_sbfc_fh / pass_data_sbfc_fh), 2) * 100

         st.markdown("<h2 style='text-align: center; color: gray;'>First Half</h2>", unsafe_allow_html=True)
         pass_acc_fh = f"""

                                        <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                                        <p><strong>{team_a}</strong>: {pass_acc_pr_fh}%</p>

                                        <p><strong>{team_b}</strong>: {pass_acc_team2_fh}%</p>

                                        </div>

                                        """
         st.markdown(pass_acc_fh, unsafe_allow_html=True)

         #Second Half
         succ_pass_sh = second_half[(second_half["Event"] == "Successful Pass")]
         succ_pass_team1_sh = len(succ_pass_sh[succ_pass_sh['Team'] == 'Prakrida FC'].reset_index(drop=True))
         succ_pass_team2_sh = len(succ_pass_sh[succ_pass_sh['Team'] == 'SBFC'].reset_index(drop=True))

         pass_acc_team1_sh = round((succ_pass_team1_sh / pass_data_pr_sh), 2) * 100
         pass_acc_team2_sh = round((succ_pass_team2_sh / pass_data_sbfc_sh), 2) * 100

         st.markdown("<h2 style='text-align: center; color: gray;'>Second Half</h2>", unsafe_allow_html=True)
         pass_acc_sh = f"""

                                                <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                                                <p><strong>{team_a}</strong>: {pass_acc_team1_sh}%</p>

                                                <p><strong>{team_b}</strong>: {pass_acc_team2_sh}%</p>

                                                </div>

                                                """
         st.markdown(pass_acc_sh, unsafe_allow_html=True)

         # Full Time
         succ_pass_team1 = succ_pass_pr_fh + succ_pass_team1_sh
         succ_pass_team2 = succ_pass_sbfc_fh + succ_pass_team2_sh

         pass_acc_team1 = round((succ_pass_team1 / pass_data_pr), 2) * 100
         pass_acc_team2 = round((succ_pass_team2 / pass_data_sbfc), 2) * 100

         st.markdown("<h2 style='text-align: center; color: gray;'>Full Time</h2>", unsafe_allow_html=True)
         pass_acc = f"""

                            <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                            <p><strong>{team_a}</strong>: {pass_acc_team1}%</p>

                            <p><strong>{team_b}</strong>: {pass_acc_team2}%</p>

                            </div>

                        """
         st.markdown(pass_acc, unsafe_allow_html=True)
         st.markdown("------------------------------------------------")

         #Key Passes
         st.subheader("Key Passes")
         #First Half
         key_pass_fh = first_half[(first_half["Key_Pass"] == 1)]
         key_pass_team1_fh = len(key_pass_fh[key_pass_fh['Team'] == team_a].reset_index(drop=True))
         key_pass_team2_fh = len(key_pass_fh[key_pass_fh['Team'] == team_b].reset_index(drop=True))

         st.markdown("<h2 style='text-align: center; color: gray;'>First Half</h2>", unsafe_allow_html=True)
         key_pass_fh = f"""

                            <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                            <p><strong>{team_a}</strong>: {key_pass_team1_fh}</p>

                            <p><strong>{team_b}</strong>: {key_pass_team2_fh}</p>

                            </div>

                       """
         st.markdown(key_pass_fh, unsafe_allow_html=True)

         # Second Half
         key_pass_sh = second_half[(second_half["Key_Pass"] == 1)]
         key_pass_team1_sh = len(key_pass_sh[key_pass_sh['Team'] == team_a].reset_index(drop=True))
         key_pass_team2_sh = len(key_pass_sh[key_pass_sh['Team'] == team_b].reset_index(drop=True))

         st.markdown("<h2 style='text-align: center; color: gray;'>Second Half</h2>", unsafe_allow_html=True)
         key_pass_sh = f"""

                            <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                            <p><strong>{team_a}</strong>: {key_pass_team1_sh}</p>

                            <p><strong>{team_b}</strong>: {key_pass_team2_sh}</p>

                            </div>

                        """
         st.markdown(key_pass_sh, unsafe_allow_html=True)

         # Full Time
         key_pass_team1 = key_pass_team1_fh + key_pass_team1_sh
         key_pass_team2 = key_pass_team2_fh + key_pass_team2_sh

         st.markdown("<h2 style='text-align: center; color: gray;'>Full Time</h2>", unsafe_allow_html=True)
         key_passes = f"""

                        <div style="text-align: center; font-size: 24px; font-family: Arial, sans-serif; color: 1E90FF;">

                        <p><strong>{team_a}</strong>: {key_pass_team1}</p>

                        <p><strong>{team_b}</strong>: {key_pass_team2}</p>

                        </div>

                    """
         st.markdown(key_passes, unsafe_allow_html=True)
         st.markdown("------------------------------------------------")






         # Pass Network

         st.subheader("Pass Network")

         pass_data = filtered_df[(filtered_df["Event"] == "Successful Pass") | (filtered_df["Event"] == "Unsuccessful Pass")]

         if not pass_data.empty:

             pitch = Pitch(pitch_type='opta', pitch_color='white', line_color='black')

             fig, ax = pitch.draw()



             pass_links = pass_data.groupby(["Player", "Team"]).size().reset_index(name="count")
             #st.dataframe(pass_links)
             for _, row in pass_links.iterrows():

                 player, team, count = row["Player"], row["Team"], row["count"]

                 color = "blue" if team == "Prakrida FC" else "red"

                 ax.annotate(player, (10, 10), color=color, fontsize=10)

                 ax.plot([10, 50], [10, 50], c=color, lw=count)



             st.pyplot(fig)

         else:

             st.info("No pass data available.")



         # Key Metrics Summary

         st.subheader("Key Metrics Summary")

         st.write("Summary of team and player performance metrics:")

         st.metric("Total Shots", len(filtered_df[(filtered_df["Event"] == "Shot On Target") | (filtered_df["Event"] == "Shot Off Target")]))

         st.metric("Total Passes", len(filtered_df[(filtered_df["Event"] == "Successful Pass") | (filtered_df["Event"] == "Unsuccessful Pass")]))

         st.metric("Fouls Committed", len(filtered_df[filtered_df["Event"] == "Foul"]))

         st.metric("Goals", len(filtered_df[filtered_df["Event"] == "Goal"]))



         st.success("Analysis Complete!")

else:

     st.info("Upload a CSV file to start the analysis.")




